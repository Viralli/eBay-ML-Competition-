Code Explanation

The provided Python code demonstrates a practical implementation of a Random Forest Regressor machine learning model to predict 
delivery dates for items sold on eBay. Here's a breakdown of how the code works:

Code Explanation

  1. Import Necessary Libraries:

        import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error

These libraries are essential for data manipulation, splitting the dataset, training the model, and evaluating its performance.

  2. Load Dataset:

try:
    data = pd.read_csv('dataset.csv')
except FileNotFoundError:
    print("Dataset file 'dataset.csv' not found. Please provide the correct file path.")
    exit(1)

The dataset is loaded from a CSV file. If the file is not found, an error message is displayed, and the script exits.

3. Preprocess Data:

try:
    required_columns = ['seller_packaging_time', 'transit_time', 'delivery_date']
    for col in required_columns:
        if col not in data.columns:
            raise KeyError(f"Column '{col}' not found in dataset")
    
    data[required_columns] = data[required_columns].apply(pd.to_numeric, errors='coerce')
    data = data.dropna(subset=required_columns)
    
    X = data[['seller_packaging_time', 'transit_time']]
    y = data['delivery_date']
except KeyError as e:
    print(f"Column not found in dataset: {e}")
    exit(1)

This step ensures that the required columns exist, converts them to numeric types, handles missing values, and separates 
the features and target variable.

4. Split Data:

try:
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
except NameError:
    print("Ensure you have imported train_test_split correctly from sklearn.model_selection.")
    exit(1)

The dataset is split into training and testing sets, with 80% of the data used for training and 20% for testing.

5. Train and Evaluate Model:

try:
    model = RandomForestRegressor(n_estimators=100, random_state=42)

    model.fit(X_train, y_train)

    predictions = model.predict(X_test)

    mae = mean_absolute_error(y_test, predictions)
    print(f"Mean Absolute Error: {mae}")

    new_data = pd.DataFrame({'seller_packaging_time': [2.5], 'transit_time': [1.8]})
    predicted_delivery_date = model.predict(new_data)
    print(f"Predicted Delivery Date: {predicted_delivery_date[0]} days")
except (ValueError, TypeError) as e:
    print(f"Error during model training or prediction: {e}")
    print("Ensure that your dataset has appropriate columns and the RandomForestRegressor parameters are correctly set.")

The RandomForestRegressor model is trained on the training set, and its performance is evaluated using the Mean Absolute Error
(MAE). An example prediction is made for new data.

By integrating the above code into the eBay ML Competition project, I have demonstrated a practical implementation of the 
machine learning model(Random Forest Regressor) for predicting delivery dates. This showcases my ability to handle large-scale 
datasets and apply machine learning techniques effectively. 
